version: 0.1

phases:
  install:
    commands:
      - cd flutter_app
      - ls -la

      - echo "DEVICEFARM_APP_PATH=$DEVICEFARM_APP_PATH"

      # install flutter
      - echo "Install flutter"
      - FLUTTER_VERSION='1.22.4-stable'
      - >-
        if [ $DEVICEFARM_DEVICE_PLATFORM_NAME = "Android" ];
        then
            curl https://storage.googleapis.com/flutter_infra/releases/stable/linux/flutter_linux_$FLUTTER_VERSION.tar.xz -o flutter_linux.tar.xz
            tar xf flutter_linux.tar.xz
        fi

        if [ $DEVICEFARM_DEVICE_PLATFORM_NAME = "iOS" ];
        then
            curl https://storage.googleapis.com/flutter_infra/releases/stable/macos/flutter_macos_$FLUTTER_VERSION.zip -o flutter_macos.zip
            unzip -qq flutter_macos.zip
        fi

      - mv flutter $HOME/flutter
      - export PATH=$PATH:$HOME/flutter/bin:$HOME/flutter/bin/cache/dart-sdk/bin:$HOME/bin:/usr/bin:/usr/local/bin
      - export PATH="$PATH":"$HOME/.pub-cache/bin"
      - flutter doctor -v

  pre_test:
    commands:
      # We recommend starting appium server process in the background using the command below.
      # Appium server log will go to $DEVICEFARM_LOG_DIR directory.
      # The environment variables below will be auto-populated during run time.

  test:
    commands:
      - TEST_PHASE_STATUS=0
      - >-
        track_test_phase_status() {
          local command_exit_code=$?
          if [ "$command_exit_code" != "0" ]; then
            echo "Most recent command failed with error code: $command_exit_code"
            TEST_PHASE_STATUS=$command_exit_code
          fi
        }

        set_test_phase_exit_code() {
          return $TEST_PHASE_STATUS
        }
        
      - echo "Navigate to test package directory"
      - cd $DEVICEFARM_TEST_PACKAGE_PATH
      
      - echo "Start Flutter integration test"
      - cd flutter_app
      - rm -f .packages
      - MAIN=test_driver/main.dart
      - TESTS='test_driver/main_test.dart'
      
      - >-
        if [ $DEVICEFARM_DEVICE_PLATFORM_NAME = "Android" ];
        then
          ./script/test_android.sh --run-tests "$TESTS"
          track_test_phase_status
        fi

        if [ $DEVICEFARM_DEVICE_PLATFORM_NAME = "iOS" ];
        then
          ./script/test_ios.sh --unpack $DEVICEFARM_APP_PATH
          track_test_phase_status
          ./script/test_ios.sh --dummy-symbols build_to_os.txt
          track_test_phase_status
          ./script/test_ios.sh --run-tests "$MAIN" "$TESTS"
          track_test_phase_status
        fi

      # move any flutter crash logs to artifacts dir
      - >-
        for f in flutter_*.log; do
          if [ -e "$f" ]; then
            echo "Archiving $f to $DEVICEFARM_LOG_DIR"
            mv $f $DEVICEFARM_LOG_DIR
          fi
        done

      - ls -la $DEVICEFARM_LOG_DIR
      - echo done.
      - set_test_phase_exit_code

  # The post test phase includes are commands that are run after your tests are executed.
  post_test:
    commands:

# The artifacts phase lets you specify the location where your tests logs, device logs will be stored.
# And also let you specify the location of your test logs and artifacts which you want to be collected by Device Farm.
# These logs and artifacts will be available through ListArtifacts API in Device Farm.
artifacts:
  # By default, Device Farm will collect your artifacts from following directories
  - $DEVICEFARM_LOG_DIR
