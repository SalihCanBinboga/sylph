version: 0.1

# Phases are collection of commands that get executed on Device Farm.
phases:
  # The install phase includes commands that install dependencies that your tests use.
  # Default dependencies for testing frameworks supported on Device Farm are already installed.
  install:
    commands:
      # By default, Appium server version used is 1.7.2.
      # You can switch to an alternate supported version from 1.6.5, 1.7.1, 1.7.2, 1.8.0 or 1.8.1 by using a command like "avm 1.7.1"
      # OR
      # To install a newer version of Appium use the following commands:
      # - export APPIUM_VERSION=1.8.1
      # - avm $APPIUM_VERSION
      # - ln -s /usr/local/avm/versions/$APPIUM_VERSION/node_modules/.bin/appium  /usr/local/avm/versions/$APPIUM_VERSION/node_modules/appium/bin/appium.js

      # enter flutter app directory in Appium bundle
      - ls -la
      - which bash
      - cd flutter_app
      - ls -la
      - bash --version
      
      - echo "DEVICEFARM_APP_PATH=${DEVICEFARM_APP_PATH}"

      # install flutter
      - echo "Install flutter"
      - FLUTTER_VERSION='1.22.4-stable'
      - >-
        if [ $DEVICEFARM_DEVICE_PLATFORM_NAME = "Android" ];
        then
            # Install Flutter
            curl https://storage.googleapis.com/flutter_infra/releases/stable/linux/flutter_linux_$FLUTTER_VERSION.tar.xz -o flutter_linux.tar.xz
            tar xf flutter_linux.tar.xz
        fi

        if [ $DEVICEFARM_DEVICE_PLATFORM_NAME = "iOS" ];
        then
            # Install Flutter
            curl https://storage.googleapis.com/flutter_infra/releases/stable/macos/flutter_macos_$FLUTTER_VERSION.zip -o flutter_macos.zip
            unzip -qq flutter_macos.zip
        fi

      - mv flutter $HOME/flutter
      - export PATH=$PATH:$HOME/flutter/bin:$HOME/flutter/bin/cache/dart-sdk/bin:$HOME/bin:/usr/bin:/usr/local/bin
      - export PATH="$PATH":"$HOME/.pub-cache/bin"
      - flutter doctor -v
      - echo $BASH

  # The pre-test phase includes commands that setup your test environment.
  pre_test:
    commands:
      # We recommend starting appium server process in the background using the command below.
      # Appium server log will go to $DEVICEFARM_LOG_DIR directory.
      # The environment variables below will be auto-populated during run time.
      - echo pre_test


  # The test phase includes commands that run your test suite execution.
  test:
    commands:
      # Report status of each command exit code.
      # Use last failing command exit code as test phase exit code
      # or
      # if no command failed, exit test phase normally.
      # (this is required because test phase does not track a failed command correctly.
      - TEST_PHASE_STATUS=0 # success
      - >-
        track_test_phase_status() {
          local command_exit_code=$?
          if [ "$command_exit_code" != "0" ]; then
            echo "Most recent command failed with error code: $command_exit_code"
            TEST_PHASE_STATUS=$command_exit_code
          fi
        }

        set_test_phase_exit_code() {
          return $TEST_PHASE_STATUS
        }
        
      - >-
        custom_test_runner() {
		  echo "custom_test_runner start in"
          local test_path='test_driver/main_test.dart'
          local forwarded_port=4723

          local app_id
          app_id=$(grep applicationId android/app/build.gradle | awk '' | tr -d '"')

          echo "Starting Flutter app $app_id in debug mode..."

          flutter pub get

          adb version
          adb shell am force-stop "$app_id"
          adb logcat -c

          adb shell am start -a android.intent.action.RUN -f 0x20000000 --ez enable-background-compilation true --ez enable-dart-profiling true --ez enable-checked-mode true --ez verify-entry-points true --ez start-paused true "$app_id/.MainActivity"

          obs_str=$( (adb logcat -v time &) | grep -m 1 "Observatory listening on")
          obs_port_str=$(echo "$obs_str" | grep -Eo '[^:]*$')
          obs_port=$(echo "$obs_port_str" | grep -Eo '^[0-9]+')
          obs_token=$(echo "$obs_port_str" | grep -Eo '\/.*\/$')
          echo Observatory on port "$obs_port"

          port_forwarded=$(adb forward --list| grep ${forwarded_port}) || true
          if [[ ! "$port_forwarded" == "" ]]; then
            echo "unforwarding ${forwarded_port}"
            adb forward --remove tcp:${forwarded_port}
          fi

          if [[ ! "$USERNAME" == 'device-farm' ]]; then
            forwarded_port=$(adb forward tcp:0 tcp:"$obs_port")
          else
            adb forward tcp:"$forwarded_port" tcp:"$obs_port" # if running locally
          fi
          echo Local port "$forwarded_port" forwarded to observatory port "$obs_port"

          echo "Running integration test $test_path on app $app_id ..."
          export VM_SERVICE_URL=http://127.0.0.1:"$forwarded_port$obs_token"
          dart "$test_path"
		  echo "custom_test_runner start out"
        }

      # Your test package is downloaded in $DEVICEFARM_TEST_PACKAGE_PATH so we first change directory to that path.
      # We already setup python virtual environment on $DEVICEFARM_TEST_PACKAGE_PATH
      # and installed required libraries. You can run your test under $DEVICEFARM_TEST_PACKAGE_PATH
      - echo "Navigate to test package directory"
      - cd $DEVICEFARM_TEST_PACKAGE_PATH
      - ls -la
      
      - echo "Start Flutter integration test"
      - cd flutter_app
      - ls -la
#      - rm -f .packages
      
      - MAIN=test_driver/main.dart
      - TESTS='test_driver/main_test.dart'
      - >-
        if [ $DEVICEFARM_DEVICE_PLATFORM_NAME = "Android" ];
        then
		  echo "custom_test_runner start"
          custom_test_runner
		  echo "custom_test_runner end"
        fi

        if [ $DEVICEFARM_DEVICE_PLATFORM_NAME = "iOS" ];
        then
          ./script/test_ios.sh --unpack $DEVICEFARM_APP_PATH
          track_test_phase_status
          ./script/test_ios.sh --dummy-symbols build_to_os.txt
          track_test_phase_status
          ./script/test_ios.sh --run-tests "$MAIN" "$TESTS"
          track_test_phase_status
        fi

      # move any flutter crash logs to artifacts dir
      - >-
        for f in flutter_*.log; do
          if [ -e "$f" ]; then
            echo "Archiving $f to $DEVICEFARM_LOG_DIR"
            mv $f $DEVICEFARM_LOG_DIR
          fi
        done

      - ls -la $DEVICEFARM_LOG_DIR
      - echo done.
      - set_test_phase_exit_code

  # The post test phase includes are commands that are run after your tests are executed.
  post_test:
    commands:

# The artifacts phase lets you specify the location where your tests logs, device logs will be stored.
# And also let you specify the location of your test logs and artifacts which you want to be collected by Device Farm.
# These logs and artifacts will be available through ListArtifacts API in Device Farm.
artifacts:
  # By default, Device Farm will collect your artifacts from following directories
  - $DEVICEFARM_LOG_DIR