version: 0.1

phases:
  install:
    commands:
      - cd flutter_app
      - ls -la
      - bash --version
      - echo "DEVICEFARM_APP_PATH=$DEVICEFARM_APP_PATH"

      - echo "Install flutter"
      - FLUTTER_VERSION='1.22.4-stable'
      - >-
        if [ $DEVICEFARM_DEVICE_PLATFORM_NAME = "Android" ];
        then
            curl https://storage.googleapis.com/flutter_infra/releases/stable/linux/flutter_linux_$FLUTTER_VERSION.tar.xz -o flutter_linux.tar.xz
            tar xf flutter_linux.tar.xz
        fi

        if [ $DEVICEFARM_DEVICE_PLATFORM_NAME = "iOS" ];
        then
            curl https://storage.googleapis.com/flutter_infra/releases/stable/macos/flutter_macos_$FLUTTER_VERSION.zip -o flutter_macos.zip
            unzip -qq flutter_macos.zip
        fi

      - mv flutter $HOME/flutter
      - export PATH=$PATH:$HOME/flutter/bin:$HOME/flutter/bin/cache/dart-sdk/bin:$HOME/bin:/usr/bin:/usr/local/bin
      - export PATH="$PATH":"$HOME/.pub-cache/bin"
      - flutter doctor -v

  pre_test:
    commands:

  test:
    commands:
      - TEST_PHASE_STATUS=0
      - >-
        track_test_phase_status() {
          command_exit_code=$?
          if [ "$command_exit_code" != "0" ]; then
            echo "Most recent command failed with error code: $command_exit_code"
            TEST_PHASE_STATUS=$command_exit_code
          fi
        }

        set_test_phase_exit_code() {
          return $TEST_PHASE_STATUS
        }

      - echo "Navigate to test package directory"
      - cd $DEVICEFARM_TEST_PACKAGE_PATH
      - echo "Start Flutter integration test"
      - cd flutter_app
      - ls -la
      - rm -f .packages
      # - MAIN='test_driver/main.dart'
      # - TESTS='test_driver/main_test.dart'
      # - flutter config --no-analytics
      # - flutter packages get
      # - flutter drive --verbose --no-build "$MAIN"
      # - >-
        # if [ $DEVICEFARM_DEVICE_PLATFORM_NAME = "Android" ];
        # then
          # echo "script basladi"
          # cd script
          # pwd
          # bash test_android.sh --run-tests "$TESTS"
          # cd ..
          # track_test_phase_status
          # echo "script bitti"
        # fi

        # if [ $DEVICEFARM_DEVICE_PLATFORM_NAME = "iOS" ];
        # then
          # ./script/test_ios.sh --unpack $DEVICEFARM_APP_PATH
          # track_test_phase_status
          # ./script/test_ios.sh --dummy-symbols build_to_os.txt
          # track_test_phase_status
          # ./script/test_ios.sh --run-tests "$MAIN" "$TESTS"
          # track_test_phase_status
        # fi

      - test_path="test_driver/main_test.dart"
      - forwarded_port=4723
      - echo $test_path
      - app_id=$(grep applicationId android/app/build.gradle | awk '' | tr -d '')

      - echo "Starting Flutter app $app_id in debug mode..."
      - flutter pub get
      - adb version
      - adb shell am force-stop "$app_id"
      - adb logcat -c

      - adb shell am start -a android.intent.action.RUN -f 0x20000000 --ez enable-background-compilation true --ez enable-dart-profiling true --ez enable-checked-mode true --ez verify-entry-points true --ez start-paused true "$app_id/.MainActivity"

      - obs_str=$( (adb logcat -v time &) | grep -m 1 "Observatory listening on")
      - obs_port_str=$(echo "$obs_str" | grep -Eo '[^:]*$')
      - obs_port=$(echo "$obs_port_str" | grep -Eo '^[0-9]+')
      - obs_token=$(echo "$obs_port_str" | grep -Eo '\/.*\/$')
      - echo "Observatory on port $obs_port"
      - port_forwarded=$(adb forward --list| grep ${forwarded_port}) || true
      - >-
        if [ ! "$port_forwarded" = "" ]; then
          echo "unforwarding $forwarded_port"
          adb forward --remove tcp:$forwarded_port
        fi
      - >-
        if [ ! "$USERNAME" = 'device-farm' ]; then
          forwarded_port=$(adb forward tcp:0 tcp:"$obs_port")
        else
          adb forward tcp:"$forwarded_port" tcp:"$obs_port"
        fi

      - echo "Local port $forwarded_port forwarded to observatory port $obs_port"
      - echo "Running integration test $test_path on app $app_id ..."
      - export VM_SERVICE_URL="http://127.0.0.1:$forwarded_port$obs_token"
      - dart "$test_path"

      - >-
        for f in flutter_*.log; do
          if [ -e "$f" ]; then
            echo "Archiving $f to $DEVICEFARM_LOG_DIR"
            mv "$f" "$DEVICEFARM_LOG_DIR"
          fi
        done

      - ls -la "$DEVICEFARM_LOG_DIR"
      - echo 'done.'
      - set_test_phase_exit_code

  post_test:
    commands:

artifacts:
  - $DEVICEFARM_LOG_DIR
